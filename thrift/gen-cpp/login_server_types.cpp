/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "login_server_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace community { namespace login_server {

int _kMessageTypeValues[] = {
  MessageType::MT_CLIENT_REGISTER_REQ,
  MessageType::MT_CLIENT_REGISTER_RES,
  MessageType::MT_CLIENT_PASSWORD_LOGIN_REQ,
  MessageType::MT_CLIENT_LOGIN_RES,
  MessageType::MT_CLIENT_LOGOUT_REQ,
  MessageType::MT_CLIENT_LOGOUT_RES,
  MessageType::MT_UPDATE_AVAILABLE_RES
};
const char* _kMessageTypeNames[] = {
  "MT_CLIENT_REGISTER_REQ",
  "MT_CLIENT_REGISTER_RES",
  "MT_CLIENT_PASSWORD_LOGIN_REQ",
  "MT_CLIENT_LOGIN_RES",
  "MT_CLIENT_LOGOUT_REQ",
  "MT_CLIENT_LOGOUT_RES",
  "MT_UPDATE_AVAILABLE_RES"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ClientPasswordLoginReq::~ClientPasswordLoginReq() throw() {
}


void ClientPasswordLoginReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void ClientPasswordLoginReq::__set_client_random(const int64_t val) {
  this->client_random = val;
}

void ClientPasswordLoginReq::__set_client_mac(const std::string& val) {
  this->client_mac = val;
}

void ClientPasswordLoginReq::__set_client_version(const std::string& val) {
  this->client_version = val;
}

void ClientPasswordLoginReq::__set_check_sum(const std::string& val) {
  this->check_sum = val;
}

uint32_t ClientPasswordLoginReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_random);
          this->__isset.client_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_mac);
          this->__isset.client_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_version);
          this->__isset.client_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->check_sum);
          this->__isset.check_sum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientPasswordLoginReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientPasswordLoginReq");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_random", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->client_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_mac", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->client_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_version", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->client_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("check_sum", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->check_sum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientPasswordLoginReq &a, ClientPasswordLoginReq &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.client_random, b.client_random);
  swap(a.client_mac, b.client_mac);
  swap(a.client_version, b.client_version);
  swap(a.check_sum, b.check_sum);
  swap(a.__isset, b.__isset);
}

ClientPasswordLoginReq::ClientPasswordLoginReq(const ClientPasswordLoginReq& other0) {
  user_id = other0.user_id;
  client_random = other0.client_random;
  client_mac = other0.client_mac;
  client_version = other0.client_version;
  check_sum = other0.check_sum;
  __isset = other0.__isset;
}
ClientPasswordLoginReq& ClientPasswordLoginReq::operator=(const ClientPasswordLoginReq& other1) {
  user_id = other1.user_id;
  client_random = other1.client_random;
  client_mac = other1.client_mac;
  client_version = other1.client_version;
  check_sum = other1.check_sum;
  __isset = other1.__isset;
  return *this;
}
void ClientPasswordLoginReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientPasswordLoginReq(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "client_random=" << to_string(client_random);
  out << ", " << "client_mac=" << to_string(client_mac);
  out << ", " << "client_version=" << to_string(client_version);
  out << ", " << "check_sum=" << to_string(check_sum);
  out << ")";
}


ClientPasswordLoginReqChecksum::~ClientPasswordLoginReqChecksum() throw() {
}


void ClientPasswordLoginReqChecksum::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void ClientPasswordLoginReqChecksum::__set_password(const std::string& val) {
  this->password = val;
}

void ClientPasswordLoginReqChecksum::__set_client_random(const int64_t val) {
  this->client_random = val;
}

void ClientPasswordLoginReqChecksum::__set_server_random(const int64_t val) {
  this->server_random = val;
}

uint32_t ClientPasswordLoginReqChecksum::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_random);
          this->__isset.client_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_random);
          this->__isset.server_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientPasswordLoginReqChecksum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientPasswordLoginReqChecksum");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_random", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->client_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_random", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->server_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientPasswordLoginReqChecksum &a, ClientPasswordLoginReqChecksum &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.password, b.password);
  swap(a.client_random, b.client_random);
  swap(a.server_random, b.server_random);
  swap(a.__isset, b.__isset);
}

ClientPasswordLoginReqChecksum::ClientPasswordLoginReqChecksum(const ClientPasswordLoginReqChecksum& other2) {
  user_id = other2.user_id;
  password = other2.password;
  client_random = other2.client_random;
  server_random = other2.server_random;
  __isset = other2.__isset;
}
ClientPasswordLoginReqChecksum& ClientPasswordLoginReqChecksum::operator=(const ClientPasswordLoginReqChecksum& other3) {
  user_id = other3.user_id;
  password = other3.password;
  client_random = other3.client_random;
  server_random = other3.server_random;
  __isset = other3.__isset;
  return *this;
}
void ClientPasswordLoginReqChecksum::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientPasswordLoginReqChecksum(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "password=" << to_string(password);
  out << ", " << "client_random=" << to_string(client_random);
  out << ", " << "server_random=" << to_string(server_random);
  out << ")";
}


ClientTicketLoginReqChecksum::~ClientTicketLoginReqChecksum() throw() {
}


void ClientTicketLoginReqChecksum::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void ClientTicketLoginReqChecksum::__set_session_ticket(const std::string& val) {
  this->session_ticket = val;
}

void ClientTicketLoginReqChecksum::__set_client_random(const int64_t val) {
  this->client_random = val;
}

void ClientTicketLoginReqChecksum::__set_server_random(const int64_t val) {
  this->server_random = val;
}

uint32_t ClientTicketLoginReqChecksum::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_ticket);
          this->__isset.session_ticket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_random);
          this->__isset.client_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_random);
          this->__isset.server_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientTicketLoginReqChecksum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientTicketLoginReqChecksum");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_ticket", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->session_ticket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_random", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->client_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_random", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->server_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientTicketLoginReqChecksum &a, ClientTicketLoginReqChecksum &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.session_ticket, b.session_ticket);
  swap(a.client_random, b.client_random);
  swap(a.server_random, b.server_random);
  swap(a.__isset, b.__isset);
}

ClientTicketLoginReqChecksum::ClientTicketLoginReqChecksum(const ClientTicketLoginReqChecksum& other4) {
  user_id = other4.user_id;
  session_ticket = other4.session_ticket;
  client_random = other4.client_random;
  server_random = other4.server_random;
  __isset = other4.__isset;
}
ClientTicketLoginReqChecksum& ClientTicketLoginReqChecksum::operator=(const ClientTicketLoginReqChecksum& other5) {
  user_id = other5.user_id;
  session_ticket = other5.session_ticket;
  client_random = other5.client_random;
  server_random = other5.server_random;
  __isset = other5.__isset;
  return *this;
}
void ClientTicketLoginReqChecksum::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientTicketLoginReqChecksum(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "session_ticket=" << to_string(session_ticket);
  out << ", " << "client_random=" << to_string(client_random);
  out << ", " << "server_random=" << to_string(server_random);
  out << ")";
}


ClientLoginRes::~ClientLoginRes() throw() {
}


void ClientLoginRes::__set_error_code(const int16_t val) {
  this->error_code = val;
}

void ClientLoginRes::__set_error_text(const std::string& val) {
  this->error_text = val;
}

void ClientLoginRes::__set_user_info(const std::string& val) {
  this->user_info = val;
}

void ClientLoginRes::__set_session_ticket(const std::string& val) {
  this->session_ticket = val;
}

void ClientLoginRes::__set_room_gate_info(const std::vector< ::community::common::ServiceInfo> & val) {
  this->room_gate_info = val;
}

uint32_t ClientLoginRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_info);
          this->__isset.user_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_ticket);
          this->__isset.session_ticket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->room_gate_info.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->room_gate_info.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->room_gate_info[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.room_gate_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientLoginRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientLoginRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_info", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user_info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_ticket", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->session_ticket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_gate_info", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->room_gate_info.size()));
    std::vector< ::community::common::ServiceInfo> ::const_iterator _iter11;
    for (_iter11 = this->room_gate_info.begin(); _iter11 != this->room_gate_info.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientLoginRes &a, ClientLoginRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.user_info, b.user_info);
  swap(a.session_ticket, b.session_ticket);
  swap(a.room_gate_info, b.room_gate_info);
  swap(a.__isset, b.__isset);
}

ClientLoginRes::ClientLoginRes(const ClientLoginRes& other12) {
  error_code = other12.error_code;
  error_text = other12.error_text;
  user_info = other12.user_info;
  session_ticket = other12.session_ticket;
  room_gate_info = other12.room_gate_info;
  __isset = other12.__isset;
}
ClientLoginRes& ClientLoginRes::operator=(const ClientLoginRes& other13) {
  error_code = other13.error_code;
  error_text = other13.error_text;
  user_info = other13.user_info;
  session_ticket = other13.session_ticket;
  room_gate_info = other13.room_gate_info;
  __isset = other13.__isset;
  return *this;
}
void ClientLoginRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientLoginRes(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_text=" << to_string(error_text);
  out << ", " << "user_info=" << to_string(user_info);
  out << ", " << "session_ticket=" << to_string(session_ticket);
  out << ", " << "room_gate_info=" << to_string(room_gate_info);
  out << ")";
}


ClientLoginResUserInfo::~ClientLoginResUserInfo() throw() {
}


void ClientLoginResUserInfo::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void ClientLoginResUserInfo::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void ClientLoginResUserInfo::__set_email(const std::string& val) {
  this->email = val;
}

void ClientLoginResUserInfo::__set_nick_name(const std::string& val) {
  this->nick_name = val;
}

void ClientLoginResUserInfo::__set_avatar_url(const std::string& val) {
  this->avatar_url = val;
}

void ClientLoginResUserInfo::__set_client_ip(const std::string& val) {
  this->client_ip = val;
}

uint32_t ClientLoginResUserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          this->__isset.user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar_url);
          this->__isset.avatar_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_ip);
          this->__isset.client_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientLoginResUserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientLoginResUserInfo");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatar_url", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->avatar_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_ip", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->client_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientLoginResUserInfo &a, ClientLoginResUserInfo &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.user_name, b.user_name);
  swap(a.email, b.email);
  swap(a.nick_name, b.nick_name);
  swap(a.avatar_url, b.avatar_url);
  swap(a.client_ip, b.client_ip);
  swap(a.__isset, b.__isset);
}

ClientLoginResUserInfo::ClientLoginResUserInfo(const ClientLoginResUserInfo& other14) {
  user_id = other14.user_id;
  user_name = other14.user_name;
  email = other14.email;
  nick_name = other14.nick_name;
  avatar_url = other14.avatar_url;
  client_ip = other14.client_ip;
  __isset = other14.__isset;
}
ClientLoginResUserInfo& ClientLoginResUserInfo::operator=(const ClientLoginResUserInfo& other15) {
  user_id = other15.user_id;
  user_name = other15.user_name;
  email = other15.email;
  nick_name = other15.nick_name;
  avatar_url = other15.avatar_url;
  client_ip = other15.client_ip;
  __isset = other15.__isset;
  return *this;
}
void ClientLoginResUserInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientLoginResUserInfo(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "user_name=" << to_string(user_name);
  out << ", " << "email=" << to_string(email);
  out << ", " << "nick_name=" << to_string(nick_name);
  out << ", " << "avatar_url=" << to_string(avatar_url);
  out << ", " << "client_ip=" << to_string(client_ip);
  out << ")";
}


LogoutReq::~LogoutReq() throw() {
}


void LogoutReq::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void LogoutReq::__set_session_ticket(const std::string& val) {
  this->session_ticket = val;
}

uint32_t LogoutReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_ticket);
          this->__isset.session_ticket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LogoutReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LogoutReq");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_ticket", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->session_ticket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LogoutReq &a, LogoutReq &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.session_ticket, b.session_ticket);
  swap(a.__isset, b.__isset);
}

LogoutReq::LogoutReq(const LogoutReq& other16) {
  user_id = other16.user_id;
  session_ticket = other16.session_ticket;
  __isset = other16.__isset;
}
LogoutReq& LogoutReq::operator=(const LogoutReq& other17) {
  user_id = other17.user_id;
  session_ticket = other17.session_ticket;
  __isset = other17.__isset;
  return *this;
}
void LogoutReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LogoutReq(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "session_ticket=" << to_string(session_ticket);
  out << ")";
}


LogoutRes::~LogoutRes() throw() {
}


void LogoutRes::__set_error_code(const int16_t val) {
  this->error_code = val;
}

void LogoutRes::__set_user_id(const int64_t val) {
  this->user_id = val;
}

uint32_t LogoutRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LogoutRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LogoutRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LogoutRes &a, LogoutRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.user_id, b.user_id);
  swap(a.__isset, b.__isset);
}

LogoutRes::LogoutRes(const LogoutRes& other18) {
  error_code = other18.error_code;
  user_id = other18.user_id;
  __isset = other18.__isset;
}
LogoutRes& LogoutRes::operator=(const LogoutRes& other19) {
  error_code = other19.error_code;
  user_id = other19.user_id;
  __isset = other19.__isset;
  return *this;
}
void LogoutRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LogoutRes(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "user_id=" << to_string(user_id);
  out << ")";
}


UserRegisterReq::~UserRegisterReq() throw() {
}


void UserRegisterReq::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void UserRegisterReq::__set_nick_name(const std::string& val) {
  this->nick_name = val;
}

void UserRegisterReq::__set_gender(const int16_t val) {
  this->gender = val;
}

void UserRegisterReq::__set_email(const std::string& val) {
  this->email = val;
}

void UserRegisterReq::__set_client_ip(const std::string& val) {
  this->client_ip = val;
}

void UserRegisterReq::__set_client_mac(const std::string& val) {
  this->client_mac = val;
}

void UserRegisterReq::__set_client_version(const std::string& val) {
  this->client_version = val;
}

void UserRegisterReq::__set_app_id(const int32_t val) {
  this->app_id = val;
}

void UserRegisterReq::__set_session_id(const std::string& val) {
  this->session_id = val;
}

void UserRegisterReq::__set_session_key(const std::string& val) {
  this->session_key = val;
}

void UserRegisterReq::__set_cellphone(const std::string& val) {
  this->cellphone = val;
}

void UserRegisterReq::__set_password(const std::string& val) {
  this->password = val;
}

uint32_t UserRegisterReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          this->__isset.user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_ip);
          this->__isset.client_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_mac);
          this->__isset.client_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_version);
          this->__isset.client_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app_id);
          this->__isset.app_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_key);
          this->__isset.session_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellphone);
          this->__isset.cellphone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserRegisterReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserRegisterReq");

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_ip", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->client_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_mac", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->client_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_version", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->client_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->app_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_key", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->session_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cellphone", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->cellphone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserRegisterReq &a, UserRegisterReq &b) {
  using ::std::swap;
  swap(a.user_name, b.user_name);
  swap(a.nick_name, b.nick_name);
  swap(a.gender, b.gender);
  swap(a.email, b.email);
  swap(a.client_ip, b.client_ip);
  swap(a.client_mac, b.client_mac);
  swap(a.client_version, b.client_version);
  swap(a.app_id, b.app_id);
  swap(a.session_id, b.session_id);
  swap(a.session_key, b.session_key);
  swap(a.cellphone, b.cellphone);
  swap(a.password, b.password);
  swap(a.__isset, b.__isset);
}

UserRegisterReq::UserRegisterReq(const UserRegisterReq& other20) {
  user_name = other20.user_name;
  nick_name = other20.nick_name;
  gender = other20.gender;
  email = other20.email;
  client_ip = other20.client_ip;
  client_mac = other20.client_mac;
  client_version = other20.client_version;
  app_id = other20.app_id;
  session_id = other20.session_id;
  session_key = other20.session_key;
  cellphone = other20.cellphone;
  password = other20.password;
  __isset = other20.__isset;
}
UserRegisterReq& UserRegisterReq::operator=(const UserRegisterReq& other21) {
  user_name = other21.user_name;
  nick_name = other21.nick_name;
  gender = other21.gender;
  email = other21.email;
  client_ip = other21.client_ip;
  client_mac = other21.client_mac;
  client_version = other21.client_version;
  app_id = other21.app_id;
  session_id = other21.session_id;
  session_key = other21.session_key;
  cellphone = other21.cellphone;
  password = other21.password;
  __isset = other21.__isset;
  return *this;
}
void UserRegisterReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserRegisterReq(";
  out << "user_name=" << to_string(user_name);
  out << ", " << "nick_name=" << to_string(nick_name);
  out << ", " << "gender=" << to_string(gender);
  out << ", " << "email=" << to_string(email);
  out << ", " << "client_ip=" << to_string(client_ip);
  out << ", " << "client_mac=" << to_string(client_mac);
  out << ", " << "client_version=" << to_string(client_version);
  out << ", " << "app_id=" << to_string(app_id);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "session_key=" << to_string(session_key);
  out << ", " << "cellphone=" << to_string(cellphone);
  out << ", " << "password=" << to_string(password);
  out << ")";
}


UserRegisterRes::~UserRegisterRes() throw() {
}


void UserRegisterRes::__set_error_code(const int16_t val) {
  this->error_code = val;
}

void UserRegisterRes::__set_error_text(const std::string& val) {
  this->error_text = val;
}

void UserRegisterRes::__set_user_id(const std::string& val) {
  this->user_id = val;
}

uint32_t UserRegisterRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserRegisterRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserRegisterRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserRegisterRes &a, UserRegisterRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.user_id, b.user_id);
  swap(a.__isset, b.__isset);
}

UserRegisterRes::UserRegisterRes(const UserRegisterRes& other22) {
  error_code = other22.error_code;
  error_text = other22.error_text;
  user_id = other22.user_id;
  __isset = other22.__isset;
}
UserRegisterRes& UserRegisterRes::operator=(const UserRegisterRes& other23) {
  error_code = other23.error_code;
  error_text = other23.error_text;
  user_id = other23.user_id;
  __isset = other23.__isset;
  return *this;
}
void UserRegisterRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserRegisterRes(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_text=" << to_string(error_text);
  out << ", " << "user_id=" << to_string(user_id);
  out << ")";
}


UpdateResourceReq::~UpdateResourceReq() throw() {
}


void UpdateResourceReq::__set_client_version(const std::string& val) {
  this->client_version = val;
}

void UpdateResourceReq::__set_resource_version(const std::string& val) {
  this->resource_version = val;
}

uint32_t UpdateResourceReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_version);
          this->__isset.client_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resource_version);
          this->__isset.resource_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateResourceReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateResourceReq");

  xfer += oprot->writeFieldBegin("client_version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->client_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resource_version", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->resource_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateResourceReq &a, UpdateResourceReq &b) {
  using ::std::swap;
  swap(a.client_version, b.client_version);
  swap(a.resource_version, b.resource_version);
  swap(a.__isset, b.__isset);
}

UpdateResourceReq::UpdateResourceReq(const UpdateResourceReq& other24) {
  client_version = other24.client_version;
  resource_version = other24.resource_version;
  __isset = other24.__isset;
}
UpdateResourceReq& UpdateResourceReq::operator=(const UpdateResourceReq& other25) {
  client_version = other25.client_version;
  resource_version = other25.resource_version;
  __isset = other25.__isset;
  return *this;
}
void UpdateResourceReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateResourceReq(";
  out << "client_version=" << to_string(client_version);
  out << ", " << "resource_version=" << to_string(resource_version);
  out << ")";
}


UpdateResourceRes::~UpdateResourceRes() throw() {
}


void UpdateResourceRes::__set_result(const int16_t val) {
  this->result = val;
}

void UpdateResourceRes::__set_update_type(const int16_t val) {
  this->update_type = val;
}

void UpdateResourceRes::__set_new_source_version(const std::string& val) {
  this->new_source_version = val;
}

void UpdateResourceRes::__set_download_url(const std::string& val) {
  this->download_url = val;
}

void UpdateResourceRes::__set_md5_value(const std::string& val) {
  this->md5_value = val;
}

void UpdateResourceRes::__set_feature_url(const std::string& val) {
  this->feature_url = val;
}

void UpdateResourceRes::__set_file_size(const int32_t val) {
  this->file_size = val;
}

uint32_t UpdateResourceRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->update_type);
          this->__isset.update_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->new_source_version);
          this->__isset.new_source_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->download_url);
          this->__isset.download_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->md5_value);
          this->__isset.md5_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->feature_url);
          this->__isset.feature_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->file_size);
          this->__isset.file_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateResourceRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateResourceRes");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_type", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->update_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("new_source_version", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->new_source_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("download_url", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->download_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("md5_value", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->md5_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("feature_url", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->feature_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_size", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->file_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateResourceRes &a, UpdateResourceRes &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.update_type, b.update_type);
  swap(a.new_source_version, b.new_source_version);
  swap(a.download_url, b.download_url);
  swap(a.md5_value, b.md5_value);
  swap(a.feature_url, b.feature_url);
  swap(a.file_size, b.file_size);
  swap(a.__isset, b.__isset);
}

UpdateResourceRes::UpdateResourceRes(const UpdateResourceRes& other26) {
  result = other26.result;
  update_type = other26.update_type;
  new_source_version = other26.new_source_version;
  download_url = other26.download_url;
  md5_value = other26.md5_value;
  feature_url = other26.feature_url;
  file_size = other26.file_size;
  __isset = other26.__isset;
}
UpdateResourceRes& UpdateResourceRes::operator=(const UpdateResourceRes& other27) {
  result = other27.result;
  update_type = other27.update_type;
  new_source_version = other27.new_source_version;
  download_url = other27.download_url;
  md5_value = other27.md5_value;
  feature_url = other27.feature_url;
  file_size = other27.file_size;
  __isset = other27.__isset;
  return *this;
}
void UpdateResourceRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateResourceRes(";
  out << "result=" << to_string(result);
  out << ", " << "update_type=" << to_string(update_type);
  out << ", " << "new_source_version=" << to_string(new_source_version);
  out << ", " << "download_url=" << to_string(download_url);
  out << ", " << "md5_value=" << to_string(md5_value);
  out << ", " << "feature_url=" << to_string(feature_url);
  out << ", " << "file_size=" << to_string(file_size);
  out << ")";
}

}} // namespace
